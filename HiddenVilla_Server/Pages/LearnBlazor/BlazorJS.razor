@page "/blazorjs" 
@inject IJSRuntime JsRuntime
<h3>BlazorJS</h3>
<div class="row">
    <button class="btn btn-secondary" @onclick="(()=>TestConfirmBox(ConfirmMessage))">Test Confirm Button</button>
</div>
<div class="row mt-4">
    <button class="btn btn-success" @onclick="TestSuccess">Test Confirm Button</button>
    <button class="btn btn-danger" @onclick="TestFailure">Test Confirm Button</button>

</div>
<div class="row mt-4">
    <button class="btn btn-success" @onclick="TestSuccessSwal">Test Swal Button</button>
    <button class="btn btn-danger" @onclick="TestFailureSwal">Test Swal Button</button>

</div>
<div class="row">
    @if (ConfirmResult)
    {
        <p>Confirmation has been made!</p>
    }
    else { 
    <p>Confirmaton Pending!</p>
    }
</div>
@code {
    public string ConfirmMessage { get; set; } = "Are you sure you want to click?";
    private bool ConfirmResult { get; set; }
    private async Task TestConfirmBox(string message)
    {
        ConfirmResult = await JsRuntime.InvokeAsync<bool>("confirm", message);
    }

    private async Task TestSuccess()
    {
        await JsRuntime.ToastrSuccess("Success Message");
    }

    private async Task TestFailure()
    {
        await JsRuntime.ToastrError("Error Message");
    }

    private async Task TestSuccessSwal()
    {
        await JsRuntime.InvokeVoidAsync("ShowSwal","success","Task completed successfully!");
    }

    private async Task TestFailureSwal()
    {
        await JsRuntime.InvokeVoidAsync("ShowSwal", "error", "Task failed!");
    }
}
